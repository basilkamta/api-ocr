#!/usr/bin/env python3
"""
Script pour t√©l√©charger les mod√®les OCR n√©cessaires
"""
import os
import sys
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def download_kraken_model():
    """T√©l√©charge le mod√®le Kraken fran√ßais"""
    try:
        from kraken import repo
        
        logger.info("üì• T√©l√©chargement du mod√®le Kraken fran√ßais...")
        
        # Cr√©er le r√©pertoire des mod√®les
        models_dir = Path("/app/models")
        models_dir.mkdir(exist_ok=True)
        
        # T√©l√©charger le mod√®le
        # Les mod√®les disponibles : fr_best.mlmodel, fr_modern.mlmodel
        model_path = models_dir / "fr_best.mlmodel"
        
        if model_path.exists():
            logger.info(f"‚úÖ Mod√®le d√©j√† pr√©sent : {model_path}")
            return True
        
        logger.info("‚è≥ T√©l√©chargement en cours (peut prendre quelques minutes)...")
        
        # Alternative: t√©l√©chargement direct
        import urllib.request
        url = "https://github.com/mittagessen/kraken/raw/main/models/fr_best.mlmodel"
        
        urllib.request.urlretrieve(url, str(model_path))
        
        logger.info(f"‚úÖ Mod√®le t√©l√©charg√© : {model_path}")
        return True
        
    except ImportError:
        logger.warning("‚ö†Ô∏è  Kraken n'est pas install√©, skip t√©l√©chargement")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur t√©l√©chargement mod√®le Kraken : {e}")
        return False

def download_paddleocr_models():
    """V√©rifie/t√©l√©charge les mod√®les PaddleOCR"""
    try:
        from paddleocr import PaddleOCR
        
        logger.info("üì• V√©rification des mod√®les PaddleOCR...")
        
        # PaddleOCR t√©l√©charge automatiquement les mod√®les au premier lancement
        # On fait juste un test d'initialisation
        ocr = PaddleOCR(
            use_angle_cls=True,
            lang='fr',
            use_gpu=False,
            show_log=False
        )
        
        logger.info("‚úÖ Mod√®les PaddleOCR OK")
        return True
        
    except ImportError:
        logger.warning("‚ö†Ô∏è  PaddleOCR n'est pas install√©, skip")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur mod√®les PaddleOCR : {e}")
        return False

def download_easyocr_models():
    """T√©l√©charge les mod√®les EasyOCR"""
    try:
        import easyocr
        
        logger.info("üì• T√©l√©chargement des mod√®les EasyOCR...")
        
        # EasyOCR t√©l√©charge automatiquement les mod√®les
        reader = easyocr.Reader(['fr', 'en'], gpu=False, verbose=False)
        
        logger.info("‚úÖ Mod√®les EasyOCR OK")
        return True
        
    except ImportError:
        logger.warning("‚ö†Ô∏è  EasyOCR n'est pas install√©, skip")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur mod√®les EasyOCR : {e}")
        return False

def main():
    """T√©l√©charge tous les mod√®les n√©cessaires"""
    logger.info("üöÄ T√©l√©chargement des mod√®les OCR")
    logger.info("=" * 50)
    
    results = {
        'PaddleOCR': download_paddleocr_models(),
        'EasyOCR': download_easyocr_models(),
        'Kraken': download_kraken_model()
    }
    
    logger.info("\n" + "=" * 50)
    logger.info("üìä R√©sum√© des t√©l√©chargements :")
    
    for engine, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"  {status} {engine}")
    
    all_success = all(results.values())
    
    if all_success:
        logger.info("\n‚úÖ Tous les mod√®les sont pr√™ts!")
        return 0
    else:
        logger.warning("\n‚ö†Ô∏è  Certains mod√®les n'ont pas pu √™tre t√©l√©charg√©s")
        return 1

if __name__ == "__main__":
    sys.exit(main())